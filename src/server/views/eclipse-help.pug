extends includes/layout.pug
block title
    title Eclipse - Services - NetsBlox
block content
    mixin keyValDisp(key, val)
        if val
            b= key + ': ' 
            | #{val}
        else
            b= key
    mixin methodSig(name, description, inputs, deprecated)
        li(class= deprecated ? 'list-group-item deprecated': 'list-group-item')
            +keyValDisp(name, description)
            if inputs
                ul
                    each val, key in inputs
                        li
                            +keyValDisp(key, val)
            block

    .container
        .page-header
            h2 Eclipse 2017 Service
        p With the help of sensors provided by Weather Underground, we have created a service that gathers weather data along the path of the eclipse, before, during and after. This data is accessible through the "Eclipse-2017" service in NetsBlox. Descriptions of each remote procedure call are provided below, including the inputs and the return values.

        h3 Available Remote Procedure Calls
        p In these RPCs the values returned are in the order of latest reading first, when applicable.
        p The frequency of the sensor readings on 21st of August is once every 30 seconds and is reduced to once every five minutes at other times.
        p Wherever asked to enter a date-time value, you should follow the ISO8601 format and enter the time as in GMT timezone. You can use the "time conversion" block from the libraries menu. ISO8601 extended format is as follows: YYYY-MM-DDTHH:mm:ss.sssZ

        ul.list-group
            +methodSig('stations', 'returns a list of station IDs.')
            +methodSig('stationInfo', 'returns details about a specific station.', {stationId: ''})
            +methodSig('eclipsePath', 'returns a list 185 points depicting the path the eclipse. Each point includes coordinates and the time for totatlity at that point.')
            +methodSig('temperature', 'returns the last known temperature at a given station.', {stationId: ''}, true)
            +methodSig('pastTemperature', 'returns the temperature at a point in time.', {stationId: '', time: 'A GMT date-time value formatted in ISO8601 (YYYY-MM-DDTHH:mm:ss.sssZ).'})
            +methodSig('temperatureHistory', 'returns temperature history of a station as a list. (latest first).', {stationId: '', limit: 'The number of readings to get.'}, true)
            +methodSig('temperatureHistoryRange', 'returns a list of temperatures for a stations between two points in past time (latest first).', {stationId: '', startTime: 'an ISO8601 datetime represeting the older end of the range.', endTime: 'newer end of the range.'})
            +methodSig('condition', 'returns the last known condition at a given station. condition includes temperature, humidity, solar radiation, the exact time of the reading and more.', {stationId: ''}, true)
            +methodSig('pastCondition', 'returns the condition at a point in time.', {stationId: '', time: 'A GMT date-time value formatted in ISO8601 (YYYY-MM-DDTHH:mm:ss.sssZ).'})
            +methodSig('conditionHistory', 'returns condition history of a station as a list (latest first).', {stationId: '', limit: 'The number of readings to get.'}, true)

        h3 Station Condition Structure
        p When calling some of the RPCs on this service you get back one or more "condition" structured data objects. Here are the attributes that you can expect with these conditions. 
        ol
            li PWS: "Personal Weather Station" AKA station ID
            li Geographical attributes such as: city, state, elevation, latitude, longitude and station's distance (approximate) from the totality center line
            li weather: a short description of the weather
            li sensor values: humidity*, UV*, solar radiation*, light*, wind*, temperature
            li readAt: the time that the sensor measured the values (at GMT 0)
            li readAtLocal: the local version of readAt
            li requestTime: the time when NetsBlox's server requested the information from Weather Underground

        em *available only on select stations.
